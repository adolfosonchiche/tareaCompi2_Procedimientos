/*importar librerias o archivos utilizados*/
package com.adolfo.analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import com.adolfo.analizadores.Token;
/*podemos agregar codigo java aqui (y el nombre de una clase)*/

parser code {:

    private List<String> errorSintactico;
    private List<String> datosList;
    private int contador = 0;
    private Generador generador;
    private String arbol;

	public Parser (Lexico lex) {
		super(lex);
        this.errorSintactico = new ArrayList();
        this.datosList = new ArrayList();
        this.generador = new Generador();
        this.arbol = "digraph grafica{\n"
                + "rankdir=TB;\n"
                + "node [shape = record, style=filled, fillcolor=seashell2];\n";
	}

    /*public void report_error(String message, Object info) {
		System.out.println("reporterror");
	}
	public void report_fatal_error(String message, Object info) {
		//System.out.println("reportfatal");
	}
	public void report_fatal_error(Symbol cur) {
		System.out.println("unrecovered_syntax_error");
	}*/
    
    @Override
    public void syntax_error(Symbol st) {
        Token token = (Token) st.value;
        //report_error("Error Sintactico con el  Token:"+ token.getLexema()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumna() + "\n",null);

        System.out.println("err: " + token.getLexema() + " este no pertenece a la estructura - linea: " + token.getLine() + ", columna: " + token.getColumna());
        errorSintactico.add(String.format("Error Sintactico lexema: %s  linea: %d  columna: %d. no se esperaba ese token.", token.getLexema(), token.getLine(), token.getColumna()));
    }

    protected int error_sync_size() {
		return 1;
	}
    //retorna las variables declaradas, que se van a utilizar en otras clases
         public String getArbol(){
	        return arbol;
	    }

    
:}
/*simbolos terminales*/
terminal Token PAREIN, PAREOUT, DOSP, COMA, IGUAL, ID, PUNTOCOMA,
                PARAMETRO, NUMEROS, PROGRAMA, FUNCION, END, ENTERO, BEGIN;

/*simbolos no terminales*/
non terminal    s, pr, va, vva, mv, c, var, exp, xa, xxa;


/* Producciones siendo A el inicial*/
start with s;

/* S -> prog id PR */
s ::= PROGRAMA ID:e pr                         {:System.out.println("inicio.. " + contador); contador++;
                                                arbol += "nodo"+contador +"  [ label =\""+e.getLexema()+"\"];\n";
                                                String raiz = "nodo"+contador;
                                                arbol +=  generador.ordenar(raiz, datosList); 
                                                datosList.clear();
                                            :} 
    | error  s                               {: :} 
    ;

/*pr -> pr proc id parin va mv
pr -> pr begin var 
pr-> lambda */
pr ::= pr FUNCION ID:e PAREIN va mv   {:System.out.println("pr.. funcion id parin va" + contador); contador++;
                                            arbol += "nodo"+contador +"  [ label =\""+e.getLexema()+"\"];\n";
                                            String raiz = "nodo"+contador;
                                            arbol += generador.ordenar(raiz, datosList); 
                                            datosList.clear();
                                    :}
    | pr BEGIN var                 
    | /*lambda*/                   
    ;


/*mv -> ID parin va c*/ 
mv ::= ID:e PAREIN xa c               {: contador++;
                                        String hijo = "nodo"+contador;
                                        arbol += "nodo"+contador +"  [ label =\""+e.getLexema()+"\"];\n";
                                        datosList.add(hijo); 
                                         :}
    ;

/*c-> puntocoma END
c -> puntocoma mv 
c-> mv
c-> END */
c ::= PUNTOCOMA END            
    | PUNTOCOMA mv              
    | mv                        
    | END                       
    ;

/*var -> id exp var
var -> END*/
var ::= ID:e exp:e1 var              {:System.out.println("var..id exp var " + contador); contador++;
                                        String hijo = "nodo"+contador;
                                        arbol += "nodo"+contador +"  [ label =\""+e.getLexema()+"\"];\n";
                                        datosList.add(hijo);
                                        if(!e1.toString().isEmpty()) {
                                            contador++;
                                            String dry = "nodo"+contador;
                                            arbol += "nodo"+contador +"  [ label =\""+e1.getLexema()+"\"];\n";
                                            arbol += hijo + " -> " + dry + ";\n";
                                        }
                                :}
    | END                       
    ;

/*exp -> dosp integer puntocoma
exp -> dosp igual ID parin va puntocoma */
exp ::= DOSP ENTERO PUNTOCOMA           {:System.out.println("exp..dosp entera " + contador);  RESULT = "";:}
    |  PAREIN xa  PUNTOCOMA             {:System.out.println("exp..paruntocoma " + contador);  RESULT = "";:}
    | DOSP IGUAL ID:e PAREIN xa PUNTOCOMA      {:System.out.println("exo..dosa " + contador);  RESULT = e.getLexema();:}
    ;


/*va-> param vva
va -> pareout*/
va ::= PARAMETRO vva                
    | PAREOUT                        
    ;

/*vva -> coma param vva
vva -> parout*/
vva ::= COMA  PARAMETRO vva         
    | PAREOUT                       
    ;

/*xa-> param xxa
xa -> pareout*/
xa ::= PARAMETRO xxa                
    | NUMEROS xxa                   
    | ID xxa                        
    | PAREOUT                       
    ;

/*xxa -> coma param xxa
xxa -> parout*/
xxa ::= COMA  PARAMETRO xxa         
    | COMA NUMEROS xxa              
    | COMA ID xxa                   
    | PAREOUT                       
    ;
